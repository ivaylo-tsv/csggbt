argocd:
  enabled: true 
  dex:
    enabled: false
  notifications:
    enabled: false
  applicationSet:
    enabled: false
  crds:
    install: true
    keep: true 
  server: 
    extraArgs:
      - --insecure
  repositories:
    csggbt-repo:
      url: https://github.com/ivaylo-tsv/csggbt.git
      type: github
      name: csggbt-repo 
  configs:
    secret:
      argocdServerAdminPassword: "$2y$10$FrWT32rBLlWgECZpiokJAOCYpWDEhMNr2OqKOgHuevpPg/4eEsp5C" # csggbt-argocd-password
    cm:
      # -- Create the argocd-cm configmap for [declarative setup]
      create: true

      # -- Annotations to be added to argocd-cm configmap
      annotations: {}

      # -- The name of tracking label used by Argo CD for resource pruning
      application.instanceLabelKey: argocd.argoproj.io/instance

      # -- Enable logs RBAC enforcement
      ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/upgrading/2.3-2.4/#enable-logs-rbac-enforcement
      server.rbac.log.enforce.enable: false

      # -- Enable exec feature in Argo UI
      ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
      exec.enabled: false

      # -- Enable local admin user
      ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
      admin.enabled: true

      # -- Timeout to discover if a new manifests version got published to the repository
      timeout.reconciliation: 180s

      # -- Timeout to refresh application data as well as target manifests cache
      timeout.hard.reconciliation: 0s

      # -- Enable Status Badge
      ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge/
      statusbadge.enabled: false

  # Argo CD server ingress configuration
  ingress:
    # -- Enable an ingress resource for the Argo CD server
    enabled: true
    # -- Specific implementation for ingress controller. One of `generic`, `aws` or `gke`
    ## Additional configuration might be required in related configuration sections
    controller: aws
    # -- Additional ingress labels
    labels: {}
    # -- Additional ingress annotations
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough
    annotations: 
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/group.name: csggbt
      # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      # nginx.ingress.kubernetes.io/ssl-passthrough: "true"

    # -- Defines which ingress controller will implement the resource
    ingressClassName: alb

    host: [argocd.k8s-csggbt-72528fc5f8-966392172.eu-west-1.elb.amazonaws.com]

    # -- Argo CD server hostname
    # @default -- `""` (defaults to global.domain)
    # hostname: argocd.k8s-csggbt-72528fc5f8-966392172.eu-west-1.elb.amazonaws.com

    # -- The path to Argo CD server
    # path: /argocd

    # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    pathType: Prefix

    # -- Enable TLS configuration for the hostname defined at `server.ingress.hostname`
    ## TLS certificate will be retrieved from a TLS secret `argocd-server-tls`
    ## You can create this secret via `certificate` or `certificateSecret` option
    tls: false

    # -- The list of additional hostnames to be covered by ingress record
    # @default -- `[]` (See [values.yaml])
    extraHosts: []
      # - name: argocd.example.com
      #   path: /

    # -- Additional ingress paths
    # @default -- `[]` (See [values.yaml])
    ## Note: Supports use of custom Helm templates
    extraPaths: 
      - path: /argocd
        pathType: Prefix
        backend:
          service:
            name: argo-cd-argocd-server
            port:
              name: 8080

    # -- Additional ingress rules
    # @default -- `[]` (See [values.yaml])
    ## Note: Supports use of custom Helm templates
    extraRules: []
      # - http:
      #     paths:
      #     - path: /
      #       pathType: Prefix
      #       backend:
      #         service:
      #           name: '{{ include "argo-cd.server.fullname" . }}'
      #           port:
      #             name: '{{ .Values.server.service.servicePortHttpsName }}'

    # -- Additional TLS configuration
    # @default -- `[]` (See [values.yaml])
    extraTls: []
      # - hosts:
      #   - argocd.example.com
      #   secretName: your-certificate-name

    # AWS specific options for Application Load Balancer
    # Applies only when `serv.ingress.controller` is set to `aws`
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#aws-application-load-balancers-albs-and-classic-elb-http-mode
    aws:
      # -- Backend protocol version for the AWS ALB gRPC service
      ## This tells AWS to send traffic from the ALB using gRPC.
      ## For more information: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/target-group-health-checks.html#health-check-settings
      backendProtocolVersion: HTTP2
      # -- Service type for the AWS ALB gRPC service
      ## Can be of type NodePort or ClusterIP depending on which mode you are running.
      ## Instance mode needs type NodePort, IP mode needs type ClusterIP
      ## Ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/how-it-works/#ingress-traffic
      serviceType: NodePort 